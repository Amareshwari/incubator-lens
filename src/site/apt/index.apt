~~~
~~ #%L
~~ Grill
~~ %%
~~ Copyright (C) 2014 Inmobi
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~
Welcome to Grill!

  Conventional columnar databases (RDBMS) systems lend themselves well for
  interactive SQL queries over reasonably small datasets in the order of 10-100s of GB,
  while hadoop based warehouses operate well over large datasets in the order of TBs and
  PBs and scales fairly linearly. Though there have been some improvements recently in
  storage structures in the Hadoop warehouses such as ORC, queries over hadoop still
  typically adopts a full scan approach. Choosing between these different data stores
  based on cost of storage, concurrency, scalability and performance is fairly complex
  and not easy for most users. Grill, the new analytics platform for InMobi, a system
  we have built at InMobi to precisely solve this problem. 

	Grill aims to provide a unified interface to all analytics users within InMobi. At a high level the project provides these features - 

  * Simple metadata layer which provides an abstract view over tiered data stores

  * Single <<shared schema>> server based on the Hive Metastore - This schema is shared by data pipelines (HCatalog) and analytics applications.

	* <<OLAP Cube QL>> which is a high level SQL like language to query and describe data sets organized in data cubes.

	* A <<JDBC driver>> and <<Java client libraries>> to issue queries, and a CLI for ad hoc queries.

	* <<Grill application server>> - a REST server which allows users to query data, make schema changes, scheduling queries and enforcing quota limits on queries.

	* <<Driver based architecture>> allows plugging in reporting systems like Hive, Columnar data warehouses, Redshift, Impala etc.

	* <<Cost based engine selection>> - allows optimal use of resources by selecting the best execution engine for a given query based on the query cost.


	The following diagram shows Grill architecture.

[./figures/arch.png] Grill Architecture
